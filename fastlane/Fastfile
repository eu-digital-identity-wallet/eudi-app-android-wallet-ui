# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require "date"
require 'fileutils'

default_platform(:android)

platform :android do
  desc "Runs all the unit tests"
  lane :tests do

    # Run tests
    gradle(task: "clean")
    gradle(task: "koverHtmlReport#{ENV["APP_BUILD_TYPE"]}Debug")

    # Clean Artifacts
    clean_build_artifacts
  end

  desc "Build & Deploy Wallet"
  lane :deploy do

    git_pull

    firebase_release = latest_firebase_release(
      appId: ENV["FIREBASE_APP_ID"],
      token: ENV["FIREBASE_TOKEN"]
    )

    buildNumber = build_number(release: firebase_release)

    set_version(buildCode: buildNumber)
    fullVersion = full_version(buildType: ENV["APP_BUILD_TYPE"])

    tagVersion = tag_name(
      buildName: fullVersion,
      buildNumber: buildNumber,
      brand: ENV["APP_TAG"],
      buildType: ENV["APP_BUILD_TYPE"],
    )

    increment_version_code(
      gradle_file_path: "app/build.gradle.kts",
      version_code: buildNumber,
    )

    gradle(task: "clean")
    gradle(task: "assemble#{ENV["APP_BUILD_TYPE"]}Release")

    upload_firebase(
      appId: ENV["FIREBASE_APP_ID"],
      groups: ENV["FIREBASE_GROUPS"],
      token: ENV["FIREBASE_TOKEN"]
    )

    clean_build_artifacts
    reset_versioncode
    reset_versionName

    add_git_tag(
      tag: tagVersion,
    )

    if ENV['PROD_REMOTE_REPO']
      upload_tag(
        remoteUrl: ENV['PROD_REMOTE_REPO'],
        tag: tagVersion,
      )
    end
  
    if ENV['DEV_REMOTE_REPO']
      upload_tag(
        remoteUrl: ENV['DEV_REMOTE_REPO'],
        tag: tagVersion,
      )
    end

    if ENV['GITHUB_RELEASE_REPO'] && ENV['GITHUB_RELEASE_TOKEN']
      apkPath = prepare_binary(
        appVersion: fullVersion,
        buildType: ENV["APP_BUILD_TYPE"]
      )

      extraAttachments = ENV['GITHUB_EXTRA_ATTACHMENTS']
      attachments = [apkPath]
    
      if extraAttachments && !extraAttachments.strip.empty?
        extraPaths = extraAttachments.split(',').map(&:strip)
        attachments.concat(extraPaths)
      end

      github_release(
        token: ENV['GITHUB_RELEASE_TOKEN'],
        repo: ENV['GITHUB_RELEASE_REPO'],
        tag: tagVersion,
        version: fullVersion,
        attachments: attachments
      )
    end

  end

  desc "Rename apk before release"
  lane :prepare_binary do |values|
    app_version = values[:appVersion]
    build_type  = values[:buildType]

    project_root = File.expand_path("..", __dir__)
    base_dir = File.join(
      project_root, 
      "app", 
      "build", 
      "outputs", 
      "apk", 
      build_type, 
      "release"
    )

    default_apk_name = "app-#{build_type}-release.apk"
    new_apk_name = "#{app_version}.apk"

    default_apk_path = File.join(base_dir, default_apk_name)
    new_apk_path = File.join(base_dir, new_apk_name)

    unless File.exist?(default_apk_path)
      raise "APK not found at: #{default_apk_path}"
    end

    begin
      FileUtils.rm_f(new_apk_path)
      FileUtils.mv(default_apk_path, new_apk_path)
    rescue => e
      raise "Failed to rename APK: #{e.message}"
    end

    puts "Renamed #{default_apk_name} -> #{new_apk_name}"
    puts "New APK Path For Upload: #{new_apk_path}"
    new_apk_path
  end

  desc "Release to github"
  lane :github_release do |values|
    token = values[:token]
    repo = values[:repo]
    tag = values[:tag]
    version = values[:version]
    attachments = values[:attachments]
    github_release = set_github_release(
      repository_name: repo,
      api_token: token,
      name: version,
      tag_name: tag,
      is_generate_release_notes: true,
      upload_assets: attachments
    )
  end

  desc "Upload tag to remote repo"
  lane :upload_tag do |values|
    remoteUrl = values[:remoteUrl]
    tag = values[:tag]
    sh("git remote set-url origin #{remoteUrl}")
    push_git_tags(tag: tag)
  end

  desc "Distribute to Firebase"
  lane :upload_firebase do |values|
    appId = values[:appId]
    groups = values[:groups]
    token = values[:token]
    firebase_app_distribution(
      app: appId,
      firebase_cli_token: token,
      groups: groups,
    )
  end

  desc "Get Release version From Firebase"
  lane :latest_firebase_release do |values|
    appId = values[:appId]
    token = values[:token]
    firebase_app_distribution_get_latest_release(
      firebase_cli_token: token,
      app: appId,
    )
  end

  desc "Build Number"
  lane :build_number do |values|
    release = values[:release]
    number = release ? release[:buildVersion].to_i + 1 : 1
    puts "Build Number: #{number}"
    number
  end

  desc "Build Tag Name"
  lane :tag_name do |values|
    buildName = values[:buildName]
    buildNumber = values[:buildNumber]
    brand = values[:brand]
    buildType = values[:buildType]
    name = "#{brand}/#{buildType}_Version=#{buildName}_Build=#{buildNumber}"
    puts "Tag Name: #{name}"
    name
  end

  desc "Get version version From Project"
  lane :full_version do |values|
    buildType = values[:buildType]
    versionName = get_properties_value(
      key: "VERSION_NAME",
      path: "version.properties",
    )
    version = "#{versionName}-#{buildType}"
    puts "Full version based on properties value: #{version}"
    version
  end

  desc "Set versionCode back to default 1"
  lane :reset_versioncode do
    increment_version_code(
      gradle_file_path: "app/build.gradle.kts",
      version_code: 1,
    )
  end

  desc "Set versionName back to default yyyy.d.m"
  lane :reset_versionName do
    set_properties_value(
      path: "version.properties",
      key: "VERSION_NAME",
      value: "yyyy.mm.v",
    )
  end

  desc "Build VersionName based on CalVer"
  lane :set_version do |values|
    buildCode = values[:buildCode]
    date = DateTime.now
    version = "#{date.strftime("%Y.%m")}.#{buildCode}"
    puts "Generated Calver: #{version}"
    set_properties_value(
      path: "version.properties",
      key: "VERSION_NAME",
      value: version,
    )
  end
end
