# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
#update_fastlane

default_platform(:android)

platform :android do

  desc "Build and deploy app to the Google Play Store"
  lane :build_deploy do
    version = prepare_build()
    gradle(task: ENV["GRADLE_TASKS"])
    upload_to_play_store(track: 'alpha',
                         release_status: 'completed',
                         skip_upload_apk: true,
                         skip_upload_images: true,
                         skip_upload_screenshots: true)
  end

  lane :prepare_build do
      version_code = get_version_code()
      android_set_version_code(
        version_code: version_code,
        gradle_file: "./build.gradle.kts"
      )

      version_name = ENV["RELEASE_VERSION"].split(/[^0-9.]/)[0]
      android_set_version_name(
        version_name: version_name,
        gradle_file: "./build.gradle.kts"
      )

      change_log = "#{ENV['CHANGELOG']}"
      sh("printf '%s' '#{change_log}' > metadata/android/no-NO/changelogs/#{version_code}.txt")
      version_name + "#" + version_code.to_s
  end

  lane :get_version_code do
#    gp = google_play_track_version_codes(track: 'production')
#    gb = google_play_track_version_codes(track: 'beta')
    ga = google_play_track_version_codes(track: 'alpha')
    gi = google_play_track_version_codes(track: 'internal')
#    max_value = [gp[0].to_i, gb[0].to_i, ga[0].to_i, gi[0].to_i].max
    max_value = [ga[0].to_i, gi[0].to_i].max
    max_value + 1
  end

  desc "Run Kotlinter for lint checks."
  private_lane :lintKotlin do
    begin
        gradle(task: "lintKotlin")
    rescue => ex
        UI.user_error!("There are format exceptions. Please run ./gradlew formatKotlin and try again!")
    end
  end

  desc "Run unit test."
  private_lane :run_unittests_dev do
      gradle(task: "testDevDebugUnitTest")
  end

  desc "Assemble DevDebug Build"
  private_lane :assemble_build do
    gradle(task: "assembleDevDebug")
  end

  desc "Assemble DevRelease Build"
  private_lane :assemble_dev_release_build do
     gradle(task: "assembleDevRelease")
  end

  desc "Assemble DevDebug Test Application"
  private_lane :assemble_test_application do
    gradle(task: "assembleDevDebugAndroidTest")
  end

  desc "Assemble Build and Test Application"
  lane :assemble do
    assemble_build
    assemble_test_application
  end

  desc "Deploy a new version to Firebase app distribution"
    lane :deploy_dev do
      latest_release = firebase_app_distribution_get_latest_release(
        app: "1:673327080494:android:928aff209789a126666bbf",
        service_credentials_file: "firebase-distribution-service-account.json"
      )
      android_set_version_code(
        version_code: latest_release[:buildVersion].to_i + 1,
        gradle_file: "app/build.gradle.kts" # optional
      )
      combinedVersionName =  "#{latest_release[:displayVersion]}(#{android_get_version_code(gradle_file: "app/build.gradle.kts" )})"
      puts "#{combinedVersionName}"
      assemble_dev_release_build()
      firebase_app_distribution(
              service_credentials_file: "firebase-distribution-service-account.json",
              android_artifact_type: "APK",
              app: "1:673327080494:android:928aff209789a126666bbf",
              #release_notes_file: "release_note.txt",
              groups: "lommebok-testers"
            )
    end

  desc "Build and test application"
  lane :check_format_build_test do
    lintKotlin()
    run_unittests_dev()
  end

  desc "Run instrumentation tests in Firebase Test Lab"
  lane :instrumentation_tests_testlab do
    assemble()
    run_tests_firebase_testlab(
      project_id: "minid-authenticator-dev",
      devices: [
        {
          model: "redfin",
          version: "30"
          #model: "oriole",
          #version: "31"
          #model: "Pixel3",
          #version: "30"
        }
      ],
      timeout: "10m",
      delete_firebase_files: false,
      download_results_from_firebase: false,
      gcloud_service_key_file: "client-secret.json",
      android_test_apk: "app/build/outputs/apk/androidTest/dev/debug/app-dev-debug-androidTest.apk",
      app_apk: "app/build/outputs/apk/dev/debug/app-dev-debug.apk")
  end

end
